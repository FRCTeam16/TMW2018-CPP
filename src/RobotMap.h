// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ROBOTMAP_H
#define ROBOTMAP_H

#include "WPILib.h"
#include "ctre/Phoenix.h"
#include "Util/BSGyro.h"


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
class RobotMap {
public:
	static std::shared_ptr<WPI_TalonSRX> mastleftDart;
	static std::shared_ptr<WPI_TalonSRX> mastrightDart;
	static std::shared_ptr<DoubleSolenoid> mastShifter;
	static std::shared_ptr<Compressor> compressor;
	static std::shared_ptr<WPI_VictorSPX> intakeLeftIntakeMotor;
	static std::shared_ptr<WPI_VictorSPX> intakeRightIntakeMotor;
	static std::shared_ptr<Solenoid> intakeExtendActuator;
	static std::shared_ptr<WPI_TalonSRX> elevatorElevatorMotor1;
	static std::shared_ptr<WPI_TalonSRX> elevatorElevatorMotor2;
	static std::shared_ptr<BSGyro> gyro;
	static std::shared_ptr<WPI_TalonSRX> driveBaseFrontLeftDrive;
	static std::shared_ptr<WPI_TalonSRX> driveBaseFrontRightDrive;
	static std::shared_ptr<WPI_TalonSRX> driveBaseRearLeftDrive;
	static std::shared_ptr<WPI_TalonSRX> driveBaseRearRightDrive;
	static std::shared_ptr<WPI_TalonSRX> driveBaseFrontLeftSteer;
	static std::shared_ptr<WPI_TalonSRX> driveBaseFrontRightSteer;
	static std::shared_ptr<WPI_TalonSRX> driveBaseRearLeftSteer;
	static std::shared_ptr<WPI_TalonSRX> driveBaseRearRightSteer;
	static std::shared_ptr<PowerDistributionPanel> powerDistributionPanel;
//	static std::shared_ptr<WPI_TalonSRX> intakeRotateMotor;
//	static std::shared_ptr<DigitalInput> intakeRotateEncoder;

	static void init();
};
#endif
